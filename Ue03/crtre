#!/bin/bash

 # upfront: The client_file and order_file are assumed to be formatted correctly. Corresponding checks have not been implemented apart from checking the occurance of the correct field separator.
 # the calculations are performed via 'bc', the bash calculator. If python3 is available, these can be performed by using 'python3 -c <command>'.

 # this script has been tested with
 # -- client_file:
 # 007;MI6;Bond;James;85 Albert Embankment;12345;London
 # -- client_file END

 # -- order_file:
 # 7,3.99,Fortune cookies
 # 2,77.32,Champagne
 # 1,3700.00,<Undisclosed>
 # -- order_file END

USAGE="$0 client_nr order_file"
NUMPARA=2

ERRMSGINVARGS="Invalid number of parameters.\nUSAGE: ${USAGE}"
ERRMSGNOFILE="File $2 does not exist.\nUSAGE: ${USAGE}"
ERRMSGNOCLIENT="There is no client with number $1.\nUSAGE: ${USAGE}"
ERRMSGINVFRM="Invalid format of order file!\nAssuming '<count>,<single price>,<description>'"

client_file="${HOME}/Documents/Len/Uebungen/Ue03/client_file.txt"

# parameter check
if [[ $# != ${NUMPARA} ]]; then
	>&2 echo -e "${ERRMSGINVARGS}"
	exit 1
elif [[ ! -f $2 ]]; then
	>&2 echo -e "${ERRMSGNOFILE}"
	exit 2
elif [[ `grep -c "," $2` == 0 ]]; then 		# check for field seperator in order_file
	>&2 echo -e "${ERRMSGINVFRM}"
	exit 3
fi

# extract client data, print it in a bill type manner
# the number must match "^<num>;" as the client numbers are at the beginning of the line (^) and are delimited by ";". This regex excludes partial matches of client numbers like "4" matching "004","040","124" and so on.
bill_head=`\
	cat "${client_file}" | grep "^$1;" | \
	awk -F";" '{ printf "%s %s\n%s\n%s\n%s\n%s", $4,$3,$2,$5,$6,$7 }' \
	`

# extract bill from order_file
# first: the summary (this is assumed to work)
price_listing=`cat "$2" | awk -F"," 'BEGIN { print "Num\tprice\tdescription" } { printf "%s\t%s\t%s\n", $1,$2,$3 } END { print "\r" }' `

# then: calculate the sum and the total and with taxes
sum="0.00"
while read line; do
	calc=`echo "${line}" | awk -F"," '{ printf "scale=2;%s*%s\n", $1,$2 }' | bc `
	
	sum=`echo "scale=2;${sum}+${calc}" | bc`
	# echo "$sum"
done < "$2"
total=`echo "scale=3;${sum}*1.19" | bc`

# rounding the result: adding 0.005 and truncating
total=`echo "scale=3;${total}+0.005" | bc`
total=`LC_NUMERIC="en_US.UTF-8" printf %.2f "${total}"` # LC_NUMERIC is set so the decimal point is denoted by '.', not ',' as it would be on german machines


# check if the bill head was compiled successfully
if [[ -z ${bill_head} ]]; then
	>&2 echo -e "${ERRMSGNOCLIENT}"
	exit 4
fi

echo -e "${bill_head}\n\t\t$(date +%x)\n\nContent of order:\n${price_listing}\nSUM:\t${sum}\nTOTAL:\t${total}"

exit $?
